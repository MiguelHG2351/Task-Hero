datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
}

generator client {
  previewFeatures = ["referentialIntegrity"]
  provider        = "prisma-client-js"
}

model permission {
  id          Int    @id
  name        String @unique
  description String
}

model Table {
  id    String @id @default(cuid())
  name  String @unique
  // tasks [Task]
  // @relation(fields: [tasks], references: [id])

  projectId String
}

model Project {
  id    String @id @default(cuid())
  description String
  name  String
  teamId   String
  team     Team  @relation(fields: [teamId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  @@index([teamId])
}

model Team {
  id        String @id @default(cuid())
  full_name String @db.VarChar(100)
  image     String
  vault     Int
  projects  Project[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Temporal

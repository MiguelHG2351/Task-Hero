datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  referentialIntegrity = "prisma"
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
}

generator client {
  previewFeatures = ["referentialIntegrity"]
  provider        = "prisma-client-js"
}

model Team {
  id          String        @id @default(cuid())
  full_name   String        @db.VarChar(100)
  vaultId     Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @default(now())
  projects    Project[]
  TeamAndUser TeamAndUser[]
  vaulTeam    VaultTeam[]
}

model VaultTeam {
  id      String   @id @default(cuid())
  teamId  String
  team    Team     @relation(fields: [teamId], references: [id], onDelete: Cascade)
  secrets Secret[]

  @@index([teamId])
}

model Secret {
  id          String     @id @default(cuid())
  name        String     @db.VarChar(100)
  value       String     @db.VarChar(100)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @default(now())
  teamId      String
  VaultTeam   VaultTeam @relation(fields: [vaultTeamId], references: [id], onDelete: Cascade)
  vaultTeamId String
}

model TeamAndUser {
  id     String @id @default(cuid())
  userId String
  teamId String
  role Role @default(MEMBER)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  team   Team   @relation(fields: [teamId], references: [id], onDelete: Cascade)

  @@index([userId, teamId])
}

model Project {
  id          String   @id @default(cuid())
  description String
  name        String
  teamId      String
  team        Team     @relation(fields: [teamId], references: [id],  onDelete: Cascade)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())
  tables     Table[]
  @@index([teamId])
}

model Table {
  id        String    @id @default(cuid())
  name      String
  projectId String
  category  String    @db.Text
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  cards    Card[]
  @@index([projectId])
}

model Card {
  id       String    @id @default(cuid())
  name    String
  description String @db.Text
  category String    @db.Text
  tableId String
  table   Table     @relation(fields: [tableId], references: [id], onDelete: Cascade)

  messages MessageCard[]
  files File[]
  links Link[]
  @@index([tableId])
}

model MessageCard {
  id       String    @id @default(cuid())
  text    String    @db.Text
  img    String?    @db.Text
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  cardId  String
  card     Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  @@index([authorId, cardId])
}

model File {
  id       String    @id @default(cuid())
  path    String    @db.Text
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  cardId  String
  card     Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  @@index([authorId, cardId])
}


model Link {
  id       String    @id @default(cuid())
  url    String    @db.Text
  authorId String
  author   User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  cardId  String
  card     Card      @relation(fields: [cardId], references: [id], onDelete: Cascade)
  @@index([authorId, cardId])
}

// Auth Schemas
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  TeamAndUser   TeamAndUser[]
  MessageCard  MessageCard[]
  files         File[]
  link         Link[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model AdminAPI {
  id         String @id @default(cuid())
  name       String
  password    String
}

enum Role {
  ADMIN
  MEMBER
  GUEST
}

// Temporal
